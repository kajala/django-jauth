# (generated with --quick)

import requests.models
from typing import Any, Callable, Mapping, Sequence, Tuple, Type, TypeVar, Union

Response: Type[requests.models.Response]
ValidationError: Any
base64: module
hashlib: module
hmac: module
json: module
logger: logging.Logger
logging: module
requests: module
settings: Any

AnyStr = TypeVar('AnyStr', str, bytes)

def account_kit_get_access_token(code: str) -> requests.models.Response: ...
def account_kit_me(access_token: str) -> requests.models.Response: ...
def account_kit_sms_login_url(state: str, api_url: str = ..., **kw) -> str: ...
def facebook_get_access_token(code: str) -> requests.models.Response: ...
def facebook_login_url(state: str, api_url: str = ..., **kw) -> str: ...
def facebook_me(access_token: str) -> requests.models.Response: ...
def facebook_parse_signed_request(signed_request: str) -> dict: ...
def google_get_access_token(code: str) -> requests.models.Response: ...
def google_login_url(state: str, scope: str = ..., api_url: str = ..., **kw) -> str: ...
def google_me(access_token: str) -> requests.models.Response: ...
def http_request(method: str, url: str, **kwargs) -> requests.models.Response: ...
def oauth2_login_urls(state: str, **kw) -> dict: ...
def urlencode(query: Union[Mapping, Sequence[Tuple[Any, Any]]], doseq: bool = ..., safe: AnyStr = ..., encoding: str = ..., errors: str = ..., quote_via: Callable[[str, AnyStr, str, str], str] = ...) -> str: ...
